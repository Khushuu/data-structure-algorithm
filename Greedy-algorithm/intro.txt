-- Optimization problems can be solved using these three approaches

-- Greedy method
-- Dynamic programming
-- Branch and Bound 



-- fractional knapsack problem
-- job sequencing with deadlines
-- optimal merge pattern
-- prims and kruskals algorithm - MST
-- dijkstra's algorithm - single source shortes path - SSSP

Cormen:

Acitivity Selection Problem:

- Given a 2-d array with each item representing start and finish time of an acitivity 
- Find the maximum number of acitivity and their index that can be done so that they do not coincide 
- Seems like an interval problem 

Solution 

- Sort the acitivities on the basis of finish time in ascending order 
- If finish time is the same pick any one, lets pick the one will smaller finish time - doesn't matter 
- First interval will always be in the result 
- Start looping from the second one and if its start time does not overlap with the previous one push it into result
- Return the result or count whatever needed 

sort 
result.push_back(intervals[0]);

for(int i = 1; i < intervals.size(); i++) {

	if(intervals[i][0] >= result.back()[1]) result.push_back(intervals[i]);
}

return result;

Huffman Coding 

-- optimal way to encode files with some characters 
-- prefix codes - no two codes for a char have the same prefix 
-- give small size code to the most frequent char 
-- merge the least frequent chars and push their sum to a minHeap 
-- construct a tree give 0 code when we move to left and 1 when move to right 
-- if n chars are there - there will be n - 1 merge steps i.e u build a tree with n nodes and n-1 edges 
