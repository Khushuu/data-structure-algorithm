-- Recursion
-- set of choices and decision u make
-- have a base condition for when to stop any futher processing 

-- create recursive tree - what choices we have -- what decisions we r making on it
-- just replicate the tree in code 

Method for solving recursion problems

Induction - Hypothesis - Base Condition 

Example:

- Print 1 to n using a recursive function

// ------------------------------------------------------------------------------------------------
void print(int n) {

	if(n == 0) return; // base condition

	print(n - 1); // induction 

	cout << n << " "; // hypothesis
}
// ------------------------------------------------------------------------------------------------

// call stack 
let n = 4
print(4) --> print(3) --> print(2) --> print(1) --> print(0) --> 
pop print(0) --> 1 --> pop print(1) --> 2 --> pop print(2) --> 3 --> pop print(3) --> 4 --> pop print(4);


- Print n to 1 using a recursive function

// write the print statement before making print(n - 1) call 
// ------------------------------------------------------------------------------------------------
void print(int n) {

	if(n == 0) return; // base condition

	cout << n << " "; // hypothesis

	print(n - 1); // induction 
}
// ------------------------------------------------------------------------------------------------

- return n! - factorial of n using recursive function

// ------------------------------------------------------------------------------------------------
int factorial(int n) {

	if(n == 0) return 1;

	return n * factorial(n - 1);
}
// ------------------------------------------------------------------------------------------------


